#!/usr/bin/env sh
#
# logger.sfmod
# Provides multiple logging levels and object-like references for managing separate loggers.

# Module metadata
MOD_NAME='Textlib-Logger'
MOD_VERSION='1.0.0'
MOD_AUTHOR='admin@dtrh.net'
MOD_SUMMARY='This module provides logging capabilities'

# Outputs module information (one piece of data per line for easier parsing)
MOD_INFO() {
    echo "$MOD_NAME"
    echo "$MOD_VERSION"
    echo "$MOD_AUTHOR"
    echo "$MOD_SUMMARY"
}

# Outputs the list of commands provided by this module
MOD_COMMANDS() {
    echo "tlLogCreate tlLogWrite"
}

###############################################################################
# Help and Summary Messages for Commands
###############################################################################

# Summary and help text for `tlLogCreate`
export tlLogCreate_summary="Create a logger instance."
tlLogCreate_help="Usage: tlLogCreate <logInst> <logFile> <logLevel>
Creates a named logger storing details in environment variables.
  <logInst>: A unique identifier for the logger.
  <logFile>: Path to the file where logs will be stored.
  <logLevel>: Logging level (ERROR, WARN, INFO, DEBUG).
Example: tlLogCreate 'app' '/var/log/app.log' 'INFO'"

# Summary and help text for `tlLogWrite`
export tlLogWrite_summary="Write a message to a logger instance."
tlLogWrite_help="Usage: tlLogWrite <logInst> <logLevel> <message>
Logs a message to the specified logger.
  <logInst>: Name of the logger to use.
  <logLevel>: The level of the message (ERROR, WARN, INFO, DEBUG).
  <message>: The message to log.
Example: tlLogWrite 'app' 'INFO' 'Application started successfully.'"

###############################################################################
# Create a Logger
###############################################################################
tlLogCreate() {
  # Display help if the first argument is `--help`
  if [ "$1" = "--help" ]; then
    echo "$tlLogCreate_help"
    return 0
  fi

  logInst="$1"
  logFile="$2"
  logLevel="$3"

  if [ -z "$logInst" ] || [ -z "$logFile" ] || [ -z "$logLevel" ]; then
    echo "Error: Missing arguments for tlLogCreate." >&2
    echo "$tlLogCreate_help"
    return 1
  fi

  case "$logLevel" in
    ERROR|WARN|INFO|DEBUG) ;;
    *)
      echo "Error: Invalid log level '$logLevel'. Use ERROR, WARN, INFO, or DEBUG." >&2
      return 1
      ;;
  esac

  touch "$logFile" 2>/dev/null
  if [ ! "$0" ]; then
    echo "Error: Cannot write to log file '$logFile'." >&2
    return 1
  fi

  eval "LOGGER_${logInst}_FILE='$logFile'"
  eval "LOGGER_${logInst}_LEVEL='$logLevel'"
  export LOGGER_"${logInst}"_FILE
  export LOGGER_"${logInst}"_LEVEL
}

###############################################################################
# Log a Message
###############################################################################
tlLogWrite() {
  # Display help if the first argument is `--help`
  if [ "$1" = "--help" ]; then
    echo "$tlLogWrite_help"
    return 0
  fi

  logInst="$1"
  logLevel="$2"
  message="$3"

  if [ -z "$logInst" ] || [ -z "$logLevel" ] || [ -z "$message" ]; then
    echo "Error: Missing arguments for tlLogWrite." >&2
    echo "$tlLogWrite_help"
    return 1
  fi

  # Retrieve the log file and log level from environment variables
  logFile=$(eval "printf '%s' \"\$LOGGER_${logInst}_FILE\"")
  loggerLevel=$(eval "printf '%s' \"\$LOGGER_${logInst}_LEVEL\"")

  if [ -z "$logFile" ] || [ -z "$loggerLevel" ]; then
    echo "Error: Logger '$logInst' not found." >&2
    return 1
  fi

  case "$logLevel" in
    ERROR|WARN|INFO|DEBUG) ;;
    *)
      echo "Error: Invalid log level '$logLevel'. Use ERROR, WARN, INFO, or DEBUG." >&2
      return 1
      ;;
  esac

  # Determine log level priority
  levels="ERROR WARN INFO DEBUG"
  loggerPriority=$(echo "$levels" | tr ' ' '\n' | grep -n "$loggerLevel" | cut -d: -f1)
  messagePriority=$(echo "$levels" | tr ' ' '\n' | grep -n "$logLevel" | cut -d: -f1)

  # Only log the message if its level is within the logger's priority level
  if [ "$messagePriority" -le "$loggerPriority" ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$logLevel] $message" >> "$logFile"
  fi
}
